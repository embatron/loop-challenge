<?php

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\node\Entity\NodeType;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Logger\LoggerChannelFactoryInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Database\Database;

/**
 * Implements hook_cron().
 */
function loop_cron() {
  $module_path = \Drupal::moduleHandler()->getModule('loop')->getPath();
  $json = @file_get_contents($module_path . '/src/artists/artists.json');

  if ($json === false) {
    \Drupal::logger('loop')->error('Failed to open JSON file.');
    return;
  }

  $artists = json_decode($json, TRUE);

  if ($artists === null) {
    \Drupal::logger('loop')->error('JSON file decoding error.');
    return;
  }

  $taxonomy_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  foreach ($artists as $artist) {
    if (!isset($artist['name']) || !isset($artist['id']) || !isset($artist['genre']) || !isset($artist['nationality']) || !isset($artist['albums']) || !isset($artist['active'])) {
      \Drupal::logger('loop')->warning('Incorrect artist data: @artist', ['@artist' => print_r($artist, TRUE)]);
      continue;
    }

    // Find an existing term with 'tid' => $artist['id']
    $existing_terms = $taxonomy_storage->loadByProperties(['tid' => $artist['id']]);

    if (!empty($existing_terms)) {
        foreach ($existing_terms as $existing_term) {
            $existing_term->delete();
        }
    }

    $term = \Drupal\taxonomy\Entity\Term::create([
      'vid' => 'loop_artists',
      'name' => $artist['name'],
      'tid' => $artist['id'],
      'field_loop_genre' => $artist['genre'],
      'field_loop_nationality' => $artist['nationality'],
      'field_loop_albums' => $artist['albums'],
      'field_loop_active' => $artist['active'],
    ]);

    $result = $term->save();

    if ($result != SAVED_NEW) {
      \Drupal::logger('loop')->error('Failed to save the term: @term', ['@term' => print_r($term, TRUE)]);
    }
  }
}

/**
 * Implements hook_field_widget_complete_form_alter()
 */
function loop_field_widget_complete_form_alter(&$element, $form_state, $context) {
  if ($context['widget']->getPluginId() == 'link_default' && $context['items']->getName() == 'field_loop_event_website') {
    // Get the nid of the current node
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
      $nid = $node->id();
    }

    // Pull the 'target' value from the database
    $target_value = \Drupal::database()
      ->select('node__field_loop_event_website_target', 't')
      ->fields('t', ['target'])
      ->condition('nid', $nid)
      ->execute()
      ->fetchField();

    // If no value is found, set the default value to '_self'
    $target_value = $target_value ?? '_self';

    $element['widget'][0]['target'] = [
      '#type' => 'select',
      '#title' => t('Target'),
      '#description' => t('Custom field (Loop) to add target option for each Event Website Link'),
      '#options' => [
        '_blank' => '_blank',
        '_self' => '_self',
        '_parent' => '_parent',
        '_top' => '_top',
      ],
      '#default_value' => $target_value,  // Using the value from the database
    ];
    $element['#element_validate'][] = 'loop_custom_event_website_link_validate';
  }
}

/**
 * Validate the form (additional field) + save the data for DB
 */
function loop_custom_event_website_link_validate($element, &$form_state, $form) {
  $target_value = $element['widget'][0]['target']['#value'];
  // dpm($form_state->getValue(['field_loop_event_website']));

  if (!empty($target_value)) {
    $form_state->setValue(['field_loop_event_website', '0', 'attributes', 'target'], $target_value);
    $form_state->setValue(['field_loop_event_website', '0', 'target'], $target_value);

    // Save the 'target' value to the database
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
      $nid = $node->id();
    }
    \Drupal::database()->merge('node__field_loop_event_website_target')
      ->key(['nid' => $nid])
      ->fields(['target' => $target_value])
      ->execute();

    \Drupal::messenger()->addMessage(t('Data (target value for link) successfully saved and updated.'), 'status');
  } else {
    \Drupal::messenger()->addMessage(t('No data to save. Please fill in the required field.'), 'error');
  }
}

/**
 * Implements hook_preprocess_field()
 */
function loop_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] == 'field_loop_event_website') {
    foreach($variables['items'] as $key => $item) {
      $nid = $variables['element']['#object']->id();
      $target = \Drupal::database()
        ->select('node__field_loop_event_website_target', 't')
        ->fields('t', ['target'])
        ->condition('nid', $nid)
        ->execute()
        ->fetchField();

      $variables['items'][$key]['content']['#options']['attributes']['target'] = $target ?? '_self';
    }
  }
}